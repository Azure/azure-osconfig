name: GTest to JUnit
description: Converts GTest XML to JUnit XML

inputs:
  path:
    description: The path to load GTest XML from.
    required: true
  output:
    description: The output path for the JUnit XML file.
    required: false
    default: 'junit-output.xml'

runs:
  using: composite
  steps:
    - name: Convert GTest to JUnit
      env:
        gtest_path: ${{ inputs.path }}
        output: ${{ inputs.output }}
      run: |
        import os
        import sys
        import glob
        from collections import defaultdict
        import xml.etree.ElementTree as ET

        failures = 0
        tests = 0
        errors = 0
        time = 0.0
        suites = defaultdict(list)

        gtest_path = os.environ.get('gtest_path').strip()
        output = os.environ.get('output').strip()

        # use glob to get files
        xml_files = glob.glob(gtest_path + '/*.xml')

        for file_name in xml_files:
            print(f'Reading {file_name}')
            tree = ET.parse(file_name)
            test_suites = tree.getroot()
            failures += int(test_suites.attrib['failures'])
            tests += int(test_suites.attrib['tests'])
            errors += int(test_suites.attrib['errors'])
            time += float(test_suites.attrib['time'])

            for test_suite in test_suites:
                suites[test_suite.attrib['name']].append(list(test_suite))

        new_root = ET.Element('testsuites')
        new_root.attrib['failures'] = '%s' % failures
        new_root.attrib['tests'] = '%s' % tests
        new_root.attrib['errors'] = '%s' % errors
        new_root.attrib['time'] = '%s' % time

        for suite, cases in suites.items():
            new_suite = ET.SubElement(new_root, 'testsuite', name=suite)
            suite_time = 0.0

            for case in cases:
                new_suite.extend(case)
                suite_time += float(case[0].attrib['time'])

            new_suite.attrib['time'] = '%s' % suite_time

        new_tree = ET.ElementTree(new_root)

        with open(output, 'w') as f:
            new_tree.write(f, encoding='unicode')
      shell: python