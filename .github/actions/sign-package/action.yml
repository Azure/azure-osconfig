name: Sign Package
description: Signs package artifacts using ESRP

inputs:
  artifact:
    description: The artifact containing packages to sign
    required: true
  package-type:
    description: The type of package to sign (deb | rpm)
    required: true

runs:
  using: composite
  steps:
    - uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact }}
        path: unsigned

    - name: Sign
      shell: python
      run: |
        import json
        import os
        import glob
        import pprint
        import subprocess
        import sys
        import re

        esrp_tool = 'EsrpClient'

        aad_id = os.environ['AAD_ID'].strip()
        esrp_id = os.environ['ESRP_ID'].strip()
        workspace = os.environ['GITHUB_WORKSPACE'].strip()
        keycode = os.environ['LINUX_KEY_CODE'].strip()
        opcode = os.environ['LINUX_OP_CODE'].strip()

        source_location = 'unsigned'
        package_filter = '*.${{ inputs.package-type }}'
        files = glob.glob(os.path.join(source_location, package_filter.lower()))

        print("Found files:")
        pprint.pp(files)

        auth_json = {
          "Version": "1.0.0",
          "AuthenticationType": "AAD_CERT",
          "EsrpClientId": f"{esrp_id}",
          "TenantId": "33e01921-4d64-4f8c-a055-5bdaffd5e33d",
          "ClientId": f"{aad_id}",
          "AuthCert": {
            "SubjectName": f"CN={aad_id}.microsoft.com",
            "StoreLocation": "LocalMachine",
            "StoreName": "My",
            "SendX5c": "true",
          },
          "RequestSigningCert": {
            "SubjectName": f"CN={esrp_id}",
            "StoreLocation": "LocalMachine",
            "StoreName": "My"
          }
        }

        input_json = {
          "Version": "1.0.0",
          "SignBatches": [
            {
              "SourceLocationType": "UNC",
              "SourceRootDirectory": source_location,
              "DestinationLocationType": "UNC",
              "DestinationRootDirectory": workspace,
              "SignRequestFiles": [],
              "SigningInfo": {
                "Operations": [
                  {
                    "KeyCode": f"{keycode}",
                    "OperationCode": f"{opcode}",
                    "Parameters": {},
                    "ToolName": "sign",
                    "ToolVersion": "1.0",
                  }
                ]
              }
            }
          ]
        }

        config_json = {
          "Version": "1.0.0",
          "EsrpApiBaseUri": "https://api.esrp.microsoft.com/api/v2/",
          "AppDataFolder": os.environ['TEMP'],
          "EsrpSessionTimeoutInSec": 3600,
          "MinThreadPoolThreads": -1,
          "MaxDegreeOfParallelism": -1,
          "ExponentialFirstFastRetry": True,
          "ExponentialRetryCount": 5,
          "ExponentialRetryMinBackOff": "00:00:03",
          "ExponentialRetryMaxBackOff": "00:01:00",
          "ExponentialRetryDeltaBackOff": "00:00:05",
        }

        # add files to sign
        for f in files:
          name = os.path.basename(f)
          input_json["SignBatches"][0]["SignRequestFiles"].append(
            {
              "SourceLocation": name,
              "DestinationLocation": os.path.join("signed", name),
            }
          )

        policy_json = {
          "Version": "1.0.0",
          "Intent": "production release",
          "ContentType": "binary",
        }

        configs = [
          ("auth.json", auth_json),
          ("input.json", input_json),
          ("policy.json", policy_json),
          ("config.json", config_json),
        ]

        for filename, data in configs:
          with open(filename, 'w') as fp:
            json.dump(data, fp)

        # Run ESRP Client
        esrp_out = "esrp_out.json"
        result = subprocess.run(
          [esrp_tool, "sign",
          "-a", "auth.json",
          "-i", "input.json",
          "-c", "config.json",
          "-p", "policy.json",
          "-o", esrp_out,
          "-l", "Verbose"],
          capture_output=True,
          text=True,
          cwd=workspace)

        # Scrub log before printing
        log = re.sub(r'^.+Uploading.*to\s*destinationUrl\s*(.+?),.+$',
            '***',
            result.stdout,
            flags=re.IGNORECASE|re.MULTILINE)

        print(log)

        if result.returncode != 0:
          print("Failed to run ESRPClient.exe")
          sys.exit(1)

        if os.path.isfile(esrp_out):
          print("ESRP output json:")
          with open(esrp_out, 'r') as fp:
            pprint.pp(json.load(fp))

        for file in files:
          if os.path.isfile(os.path.join("signed", file)):
            print(f"Success!\nSigned {file}")

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact }}-signed
        path: signed
