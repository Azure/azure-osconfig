name: Check logs
description: Parses logs for crashes and failures

inputs:
  logs:
    description: The path to load GTest XML from.
    required: true

runs:
  using: composite
  steps:
    - name: Parse logs
      env:
        logs: ${{ inputs.logs }}
      run: |
        import os
        import sys

        # Create an error annotation
        def error(title, file, line, msg):
            print(f"::error file={file},line={line},title={title}::{msg}")

        logs = os.environ.get('logs').split('\n')

        crashes = ['SIGSEGV', 'SIGFPE', 'SIGILL', 'SIGABRT', 'SIGBUS']
        crash_found = False

        for log_file in logs:
            with open(log_file, 'r') as f:
                prev_line = None
                for line_num, line in enumerate(f, 1):
                    for crash in crashes:
                        if crash in line:
                            msg = (prev_line + line) if prev_line else line
                            error(crash, log_file, line_num, msg)
                            crash_found = True
                            break
                    prev_line = line

        if crash_found:
            sys.exit(1)
      shell: python
