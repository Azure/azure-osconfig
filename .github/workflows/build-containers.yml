name: Build Containers

on:
  pull_request:
    paths:
      - devops/docker/**/Dockerfile
  push:
    branches:
      - main
    paths:
      - devops/docker/**/Dockerfile
  workflow_dispatch:
    inputs:
      distro_list:
        description: 'Comma separated list of distros to build. eg. ubuntu-20.04-amd64,ubuntu-20.04-arm64'
        type: string
      rebuild_all:
        description: 'Rebuild all containers'
        default: false
        type: boolean

jobs:
  modified-containers:
    name: Modified containers
    runs-on: ubuntu-latest
    outputs:
      amd64Containers: ${{ steps.matrix.outputs.amd64Containers }}
      arm64Containers: ${{ steps.matrix.outputs.arm64Containers }}
    steps:
      - uses: actions/checkout@v4

      - name: Get changed containers
        id: changed-containers
        uses: tj-actions/changed-files@v41.0.0
        with:
          files: ./devops/docker/**/Dockerfile

      - name: Create build matrix
        id: matrix
        run: |
          # If this workflow is present in other_changed_files, then rebuild all containers
          if [[ -n "${str// }" ]]; then
            echo "Building specified containers..."
            containers=$(echo "${{ inputs.distro_list }}" | jq -R 'split(",") | map("devops/docker/" + . + "/Dockerfile")')
          elif [[ "${{ steps.changed-containers.outputs.other_changed_files }}" == *".github/workflows/build-containers.yml"* ]] || [[ "${{ inputs.rebuild_all }}" == "true" ]]; then
            echo "Workflow file changed, adding all containers to build matrix..."
            containers=$(ls -d devops/docker/**/Dockerfile | jq -R . | jq -s .)
          else
            containers=$(echo -n ${{ steps.changed-containers.outputs.all_changed_files }} | jq -R -s -c 'split(" ")')
          fi

          amd64Containers=$(echo $containers | jq '.[] | select(contains("amd64"))' | jq -s .)
          arm64Containers=$(echo $containers | jq '.[] | select(contains("arm64"))' | jq -s .)

          echo AMD64 Containers to build: $amd64Containers
          echo ARM64 Containers to build: $arm64Containers
          echo amd64Containers=$amd64Containers >> $GITHUB_OUTPUT
          echo arm64Containers=$arm64Containers >> $GITHUB_OUTPUT

  docker-build-amd64:
    name: Build AMD64 Containers
    needs: modified-containers
    runs-on: ${{ fromJSON('["self-hosted", "1ES.Pool=ci-pool", "1ES.ImageOverride=ubuntu-22.04"]') }}
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        containers: ${{ fromJson(needs.modified-containers.outputs.amd64Containers) }}
    steps:
      - uses: actions/checkout@v4
      - name: Container Build
        uses: ./.github/actions/container-build
        with:
          containers: ${{ matrix.containers }}
          force-push: true
          

  docker-build-arm64:
    name: Build ARM64 Containers
    needs: modified-containers
    runs-on: ${{ fromJSON('["self-hosted", "1ES.Pool=ci-pool-arm64", "1ES.ImageOverride=mariner-2-arm64"]') }}
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        containers: ${{ fromJson(needs.modified-containers.outputs.arm64Containers) }}
    steps:
      - uses: actions/checkout@v4
      - name: Container Build
        uses: ./.github/actions/container-build
        with:
          containers: ${{ matrix.containers }}
          force-push: true
