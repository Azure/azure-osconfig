name: Build Containers

on:
  pull_request:
    paths:
      - devops/docker/**/Dockerfile
  push:
    branches:
      - dev
    paths:
      - devops/docker/**/Dockerfile
  workflow_dispatch:
    inputs:
      distro_list:
        description: 'Comma separated list of distros to build. eg. ubuntu-20.04-amd64,ubuntu-20.04-arm64'
        type: string
      rebuild_all:
        description: 'Rebuild all containers'
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  BUILD_TYPE: Release
  MOUNT: /azure-osconfig

jobs:
  modified-containers:
    name: Modified containers
    runs-on: ubuntu-latest
    outputs:
      containers: ${{ steps.matrix.outputs.containers }}
    steps:
      - uses: actions/checkout@v4

      - name: Create build matrix
        id: matrix
        run: |
          containers=$(ls -d devops/docker/**/Dockerfile | jq -R . | jq -s .)

          echo Containers to build: $containers
          echo containers=$containers >> $GITHUB_OUTPUT

  docker-build:
    name: Docker
    needs: modified-containers
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        container: ${{ fromJson(needs.modified-containers.outputs.containers) }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup image
        id: image
        run: |
          dockerfile=${{ matrix.container }}
          image=${dockerfile#devops/docker/}
          image=${image%/*}
          distro=${image%-*}

          repo=$(echo ${{ github.repository }} | awk '{print tolower($0)}')

          echo name=$(echo -n $repo/$image) >> $GITHUB_OUTPUT
          echo path=$(dirname ${dockerfile}) >> $GITHUB_OUTPUT
          echo distro=$(echo -n $distro) >> $GITHUB_OUTPUT
          echo "image=$image" >> $GITHUB_OUTPUT

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker login (ghcr.io)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ steps.image.outputs.name }}
          tags: |
            type=sha,enable=true,priority=900,prefix=sha256-,suffix=,format=long
            type=schedule,enable=true,priority=10,prefix=date-,suffix=,pattern=nightly
            type=raw,value=git-${{ github.sha }}
            type=raw,value=run-${{ github.run_number }}

      - name: Save digest
        run: |
          DIGEST_SHA=$(echo '${{ steps.meta.outputs.json}}' | jq -r '.tags [] |select (contains(":sha256-"))')
          DIGEST_SHA=$(echo ${DIGEST_SHA} | sed -e 's#.*:sha256-\(.*\)#@sha256:\1#')
          jq --null-input \
          --arg distibution ${{ steps.image.outputs.distro }} \
          --arg digest_sha ${DIGEST_SHA} \
          '{"name": $distibution, "arch": "amd64", "tag": $digest_sha }' > digest-${{ steps.image.outputs.distro }}.txt
          cat digest-${{ steps.image.outputs.distro }}.txt

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          overwrite: true
          name: digest-${{ steps.image.outputs.distro }}
          path: digest-*.txt
          retention-days: 1

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ${{ steps.image.outputs.path }}
          # Always push the new image so that new-test-matrix.txt can be used
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  post-build:
    name: Post-Build Digest Collector
    needs: [modified-containers, docker-build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all digests artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-digests
          pattern: digest-*
          merge-multiple: true

      - name:  Combine all digest artifacts
        run: |
          rm new-test-matrix.txt || true
          function concatenate_digest() {
            FILES=( $(find all-digests -name 'digest-*.txt') | sort )
            echo "["
            last=$((${#FILES[@]}-1))
            for((i = 0; i < ${#FILES[@]}; i++)); do
                # echo -n "${FILES[$i]}" ;
                # ORS sets the output separator to noting, and than just print file
                awk 'BEGIN{ORS=""} {print}' "${FILES[$i]}" ;
                # add newline or comman
                if [[ ${i} -eq ${last} ]] ; then
                    echo ""
                else
                    echo ","
                fi
            done
            echo "]"
            }
            concatenate_digest > new-test-matrix.txt
            cat new-test-matrix.txt

      - name: Upload New Test Matrix
        uses: actions/upload-artifact@v4
        with:
          name: new-test-matrix.txt
          path: new-test-matrix.txt
