name: Universal NRP Test Run

on:
  workflow_call:
    inputs:
      target:
        required: true
        description: 'The target OS to use in build / test run.'
        type: string
      arch:
        required: true
        description: 'The architecture to use in build / test run.'
        type: string
      package-type:
        required: true
        description: 'The package type to use in the test run (DEB | RPM).'
        type: string
      policy-package:
        required: true
        description: 'Path to the policy package to use in the test run.'
        type: string
      policy-package-short-name:
        required: true
        description: 'Short name of the policy package to use in the test result artifact name.'
        type: string
      resource-count:
        required: true
        description: 'The number of resources in the policy package.'
        type: string
      install-osconfig:
        required: false
        description: 'Whether to install OSConfig package or not.'
        type: boolean
        default: false
      skip-remediation:
        required: false
        description: 'Whether to skip remediation or not.'
        type: boolean
        default: false
      tag:
        required: false
        description: 'Pester tag to include in the test run. If not provided, all tests will be run.'
        default: ''
        type: string

jobs:
  package:
    uses: ./.github/workflows/package-build.yml
    with:
      target: ${{ inputs.target }}
      arch: ${{ inputs.arch }}
      artifact: ${{ inputs.target }}-${{ inputs.policy-package-short-name }}-${{ inputs.skip-remediation == true && 'Get' || 'Set' }}${{ inputs.install-osconfig == true && '-package' || '' }}-binary
      package-type: ${{ inputs.package-type }}
      test: true

  test:
    needs: package
    runs-on: [self-hosted, 1ES.Pool=ci-pool, '1ES.ImageOverride=${{ inputs.target }}']
    steps:
      - uses: actions/checkout@v4

      - name: Normalize variables
        id: normalize
        run: |
          # Remove .zip from policy package name
          package=${{ inputs.policy-package }}
          echo policyPackage=${package%.zip} >> $GITHUB_OUTPUT

      - uses: actions/download-artifact@v4
        id: download
        with:
          name: ${{ inputs.target }}-${{ inputs.policy-package-short-name }}-${{ inputs.skip-remediation == true && 'Get' || 'Set' }}${{ inputs.install-osconfig == true && '-package' || '' }}-binary

      - name: Install OSConfig
        if: ${{ inputs.install-osconfig }}
        working-directory: ${{ steps.download.outputs.download-path }}
        run: |
          if [ "${{ inputs.package-type }}" = "DEB" ]; then
            sudo dpkg -i $(ls *.deb)
          else
            sudo rpm -fi $(ls *.rpm)
          fi

      - name: Run Guest Configuration Test
        working-directory: ${{ steps.download.outputs.download-path }}
        run: |
          script="./universalNRPTest.ps1"
          cat >$script <<EOL
          Install-Module -Name GuestConfiguration -Force
          Install-Module Pester -Force -SkipPublisherCheck
          Import-Module Pester -Passthru

          \$params = @{
              PolicyPackage = './${{ inputs.policy-package }}'
              SkipRemediation = \$${{ inputs.skip-remediation }}
              ResourceCount = ${{ inputs.resource-count }}
          }
          \$container = New-PesterContainer -Path ./src/tests/universal-nrp-e2e/UniversalNRP.Tests.ps1 -Data \$params
          \$pesterConfig = [PesterConfiguration]@{
              Run = @{
                  Exit = \$true
                  Container = \$container
              }
              Output = @{
                  Verbosity = 'Detailed'
              }
              TestResult = @{
                  Enabled      = \$true
                  OutputFormat = 'JUnitXml'
                  OutputPath   = '${{ inputs.target }}-${{ inputs.policy-package-short-name }}-${{ inputs.skip-remediation == true && 'Get' || 'Set' }}${{ inputs.install-osconfig == true && '-package' || '' }}-testResults.xml'
              }
              Should = @{
                  ErrorAction = 'Continue'
              }
              Filter = @{
                  Tag         = '${{ inputs.tag }}'
              }
          };
          Invoke-Pester -Configuration \$pesterConfig
          EOL

          sudo LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/omi/lib/ pwsh -Command $script
          ls -l
          ls -l ${{ steps.download.outputs.download-path }}

      - name: Stage OSConfig Logs
        if: success() || failure()
        run: |
          mkdir  osconfig-logs
          stat /var/log/osconfig_nrp.log
          cp -r /var/log/osconfig* osconfig-logs/

      - uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: ${{ inputs.target }}-${{ inputs.policy-package-short-name }}-${{ inputs.skip-remediation == true && 'Get' || 'Set' }}${{ inputs.install-osconfig == true && '-package' || '' }}-report
          path: '${{ steps.download.outputs.download-path }}/*testResults.xml'

      - uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: ${{ inputs.target }}-${{ inputs.policy-package-short-name }}-${{ inputs.skip-remediation == true && 'Get' || 'Set' }}${{ inputs.install-osconfig == true && '-package' || '' }}-logs
          path: osconfig-logs/osconfig*