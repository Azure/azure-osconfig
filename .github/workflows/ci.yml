name: CI

on:
  pull_request:
    paths:
      - src/**
      - .github/workflows/ci.yml

env:
  BUILD_TYPE: Release
  MOUNT: /azure-osconfig
  REGISTRY: ghcr.io

jobs:
  unit-test:
    name: Unit test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu18.04, ubuntu20.04, debian9]
        variant:
          [
            { arch: arm, platform: linux/arm/v7 },
            { arch: arm64, platform: linux/arm64/v8 },
            { arch: amd64, platform: linux/amd64 },
          ]
        exclude:
          - os: ubuntu20.04
            variant: { arch: arm, platform: linux/arm/v7 }

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          clean: true

      - name: Docker login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Run container
        id: container
        uses: ./.github/actions/container-run
        with:
          registry: ${{ env.REGISTRY }}
          container: azure/azure-osconfig/${{ matrix.os }}-${{ matrix.variant.arch }}
          platform: ${{ matrix.variant.platform }}
          mount: ${{ github.workspace }}:${{ env.MOUNT }}

      - name: Generate build
        uses: ./.github/actions/container-exec
        with:
          container: ${{ steps.container.outputs.id }}
          cmd: |
            mkdir build && cd build
            cmake ../src -DCMAKE_build-type=${{ env.BUILD_TYPE }} -Duse_prov_client=ON -Dhsm_type_symm_key=ON -DCOMPILE_WITH_STRICTNESS=ON -DBUILD_TESTS=ON -DBUILD_SAMPLES=ON -DBUILD_ADAPTERS=ON -G Ninja

      - name: Build azure-osconfig
        uses: ./.github/actions/container-exec
        with:
          container: ${{ steps.container.outputs.id }}
          working-directory: ${{ env.MOUNT }}/build
          cmd: cmake --build . --config ${{ env.BUILD_TYPE }}

      - name: Set test output
        id: test
        run: |
          echo "log=${{ matrix.os }}-${{ matrix.variant.arch }}.log" >> $GITHUB_OUTPUT
          echo "xml=${{ matrix.os }}-${{ matrix.variant.arch }}.xml" >> $GITHUB_OUTPUT

      - name: Run ctest
        uses: ./.github/actions/container-exec
        with:
          container: ${{ steps.container.outputs.id }}
          working-directory: ${{ env.MOUNT }}/build
          cmd: ctest --verbose > ../${{ steps.test.outputs.log }}

      - name: Generate test report
        uses: ./.github/actions/gtest-xml
        if: always()
        with:
          path: ./build/gtest-output
          output: ${{ steps.test.outputs.xml }}

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: unit-test
          path: |
            ${{ steps.test.outputs.log }}
            ${{ steps.test.outputs.xml }}
