name: CI

on:
  pull_request:
  schedule:
    - cron: '0 20 * * *' # Every day at 12pm PST (UTC-8)

env:
  BUILD_TYPE: Release
  MOUNT: /azure-osconfig
  REGISTRY: ghcr.io

jobs:
  create-ci-matrix:
    name: Build CI distro matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.get-matrix.outputs.matrix }}
    steps:
      - name: Get matrix
        id: get-matrix
        run: |
          matrix="$(cat <<'EOL'
          [
            { "name": "almalinux-9", "arch": "amd64", "tag": "@sha256:d2c6bd9f0eda3151c38f5c678b25124af1d34622de5757e690fe518ab613aec3" },
            { "name": "amazonlinux-2", "arch": "amd64", "tag": "@sha256:651fcca7123d696d883d5e755723ae018dadb35284fd5d3ab29008b21e858bf6" },
            { "name": "azurelinux-3", "arch": "amd64", "tag": "@sha256:029c9096b62a553eee7a6621eee36d77002effe3a2d7b8c9b7e8d59c49697cd3" },
            { "name": "centos-7", "arch": "amd64", "tag": "@sha256:fca7046aa164e1cd5e8521bbd40dcf1f714fd8ee8a73e2d2d401ef459e3d6100" },
            { "name": "centos-8", "arch": "amd64", "tag": "@sha256:3ed4e39b0524bc41b327c0aa4c3899f55febfc638d66668e4a6b5c175df892ee" },
            { "name": "debian-10", "arch": "amd64", "tag": "@sha256:f35850f7627c3404c6a3a11443505ce6b80b9b6b437cd19ca67452ab4b77a2d4" },
            { "name": "debian-11", "arch": "amd64", "tag": "@sha256:97c518527c76ad997bab15559d3640e7d2bf27eeab5eedc501546364e1dec311" },
            { "name": "debian-12", "arch": "amd64", "tag": "@sha256:05a41d7ae8b496fa956965e93ad5217633604db00851e8dfabfe7981513c2c7d" },
            { "name": "mariner-2", "arch": "amd64", "tag": "@sha256:7ac04b9368533f71127b977439f4b3a1576a1be3ec1fe444acf1216032c4ae2b" },
            { "name": "oraclelinux-7", "arch": "amd64", "tag": "@sha256:77b4c9913d01397c540dd831e80aebf57fd4cdc48d5a6fcd652128db94718f0b" },
            { "name": "oraclelinux-8", "arch": "amd64", "tag": "@sha256:2c05af2c8bea2b85108e85f0489f65d21df489f7addcb56ced1fc75bb4ce0897" },
            { "name": "rhel-7", "arch": "amd64", "tag": "@sha256:35fc1d2dd889c6225acc000dde3d819417b68fec80e3f66a0768c0dbaf1ab490" },
            { "name": "rhel-8", "arch": "amd64", "tag": "@sha256:36aa8a92ceea75f3408515b464d659ee129a30185a2abbbb2b52b1d7323ef422" },
            { "name": "rhel-9", "arch": "amd64", "tag": "@sha256:b4b0dec958fb4e5eab499fd1cc5310bf8eb3b5ca316e0ff563bffd119ae136a5" },
            { "name": "sles-15", "arch": "amd64", "tag": "@sha256:5dda8a77136f34be84cca6735872bf0ef5b2f34d41df8bb9317ec08317bcc559" },
            { "name": "ubuntu-20.04", "arch": "amd64", "tag": "@sha256:d880441d800f0b5d9acece95c2a87ae0cbb9f2f35983024fd82d7e476840c33f" },
            { "name": "ubuntu-22.04", "arch": "amd64", "tag": "@sha256:1398461e6a1f38940f10bf153ea0ea51e2a77d03de3d10e47aa9a1bb985b795f" },
            { "name": "ubuntu-24.04", "arch": "amd64", "tag": "@sha256:ecf8fcb26175d413716d0a40b043e5d9685b9b2b895de590313ef6da7318bb6b" }
          ]
          EOL
          )"

          # Skip ARM64 CI builds for now
          #
          # arm64Targets="$(cat <<'EOL'
          # [
          #   { "name": "debian-10", "arch": "arm64", "tag": "sha-c689eee" },
          #   { "name": "debian-11", "arch": "arm64", "tag": "sha-c689eee" },
          #   { "name": "debian-12", "arch": "arm64", "tag": "sha-db3d4c8" },
          #   { "name": "ubuntu-20.04", "arch": "arm64", "tag": "sha-c689eee" },
          #   { "name": "ubuntu-22.04", "arch": "arm64", "tag": "sha-db3d4c8" }
          # ]
          # EOL
          # )"
          #
          # Add arm64 distros only on scheduled runs to prevent long CI times for PRs
          # if [ "${{ github.event_name }}" == "schedule" ]; then
          #   matrix=$(jq --argjson arm64Targets "$arm64Targets" '. += $arm64Targets' <<< "$matrix")
          # fi

          echo Distros to perform CI on: $matrix
          echo matrix=$matrix >> $GITHUB_OUTPUT

  unit-test:
    name: Unit test
    needs: create-ci-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(needs.create-ci-matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          clean: true

      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      # - name: Setup QEMU
      #   if: ${{ matrix.target.arch != 'amd64' }}
      #   uses: docker/setup-qemu-action@v3

      - name: Run container
        id: container
        uses: ./.github/actions/container-run
        with:
          registry: ${{ env.REGISTRY }}
          container: azure/azure-osconfig/${{ matrix.target.name }}-${{ matrix.target.arch }}
          mount: ${{ github.workspace }}:${{ env.MOUNT }}
          tag: ${{ matrix.target.tag }}

      - name: Generate build
        uses: ./.github/actions/container-exec
        with:
          container: ${{ steps.container.outputs.id }}
          cmd: |
            (cd external/vcpkg && sed -e "s/\"2\\.7\\.4\"/\"1\\.0\\.0\"/g" -i scripts/vcpkg-tools.json && ./bootstrap-vcpkg.sh)
            mkdir build && cd build
            cmake ../src -DCMAKE_build-type=${{ env.BUILD_TYPE }} -Duse_prov_client=ON -Dhsm_type_symm_key=ON -DCOMPILE_WITH_STRICTNESS=ON -DBUILD_TESTS=ON -DBUILD_SAMPLES=ON -DBUILD_ADAPTERS=ON -Duse_default_uuid=ON

      - name: Build azure-osconfig
        uses: ./.github/actions/container-exec
        with:
          container: ${{ steps.container.outputs.id }}
          working-directory: ${{ env.MOUNT }}/build
          cmd: cmake --build . --config ${{ env.BUILD_TYPE }} --parallel

      - name: Run ctest
        uses: ./.github/actions/container-exec
        with:
          container: ${{ steps.container.outputs.id }}
          working-directory: ${{ env.MOUNT }}/build
          cmd: set -o pipefail && ctest --verbose | tee ../${{ matrix.target.name }}-${{ matrix.target.arch }}.log

      - name: Generate test report
        uses: ./.github/actions/gtest-xml
        if: success() || failure()
        with:
          path: ./build/gtest-output
          output: ${{ matrix.target.name }}-${{ matrix.target.arch }}.xml

      - uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: unit-test-${{ matrix.target.name }}-${{ matrix.target.arch }}
          path: |
            ${{ matrix.target.name }}-${{ matrix.target.arch }}.log
            ${{ matrix.target.name }}-${{ matrix.target.arch }}.xml

  report:
    name: Report
    needs: unit-test
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
    if: always()
    steps:
      - name: Download Test Report Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ci-test
          pattern: 'unit-test-*'
          merge-multiple: true

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: 'ci-test/*.xml'
