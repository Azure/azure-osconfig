name: Run Tests
on:
  workflow_call:
    inputs:
      environment:
        description: The name of the target environment
        type: string
        required: true
      distroName:
        description: The name of the target distro
        type: string
        required: true
      resourceGroupName:
        description: The name of the target environment
        type: string
        required: true
      allowedMemoryDelta:
        description: The allowed memory delta expressed in %, workflow will fail if the the memory usage grows beyond this value
        type: number
        default: 50
        required: false
      cpuThreshold:
        description: The cpu threshold
        type: string
        default: ""
        required: false
      delaySampling:
        description: The number of seconds to delay the performance sampling
        type: number
        default: 10
        required: false
      repeatForXHours:
        description: Repeat the test suite for X hours, every test run gets a new test-report
        type: number
        required: false
      testNameSuffix:
        description: The name to use for the suffix of the test report
        type: string
        required: false

jobs:
  run-tests:
    name: ${{ matrix.distroName }}
    environment: ${{ inputs.environment }}
    strategy:
      fail-fast: false
      matrix:
        distroName: ${{ fromJson(inputs.distroName) }}
    runs-on: ${{ inputs.resourceGroupName }}-${{ matrix.distroName }}
    timeout-minutes: 1440
    steps:
      - uses: actions/checkout@v1

      - name: Retreive target test data
        id: get-test-data
        run: |
          target=`jq '.[] | select(.distroName=="${{ matrix.distroName }}")' ${{ github.workspace }}/devops/e2e/${{ secrets.E2E_ENV_FILE }}`
          echo "device_id=$(echo $target | jq .device_id | tr -d \")" >> $GITHUB_OUTPUT

          test_filter=$(echo $target | jq .test_filter | tr -d \")
          [[ "$test_filter" != "null" ]] && test_filter="--filter \"${test_filter}\"" || test_filter=""
          echo Using test filter: $test_filter
          echo "test_filter=$test_filter" >> $GITHUB_OUTPUT

          package_path=$(echo $target | jq .package_path | tr -d \")
          [[ "$package_path" != "null" ]] && package_path="${package_path}" || package_path=""
          echo Using package path: $package_path
          echo "package_path=$package_path" >> $GITHUB_OUTPUT

      - name: Retreive device identity
        id: hub-identity
        run: |
          token=`curl -X POST -H 'Content-Type: application/x-www-form-urlencoded' https://login.microsoftonline.com/${{ secrets.TENANT_ID }}/oauth2/v2.0/token --data-urlencode 'grant_type=client_credentials' --data-urlencode 'client_id=${{ secrets.CLIENT_ID }}' --data-urlencode 'client_secret=${{ secrets.CLIENT_SECRET }}' --data-urlencode 'scope=https://vault.azure.net/.default' | jq .access_token | tr -d \"`

          iothubowner_connection_string=`curl -s "https://${{ secrets.KEY_VAULT_NAME }}.vault.azure.net/secrets/${{ inputs.resourceGroupName }}-iothubowner?api-version=2016-10-01" -H "Authorization: Bearer $token" | jq .value | tr -d \"`
          echo ::add-mask::$iothubowner_connection_string
          echo "iothubowner_connection_string=$iothubowner_connection_string" >> $GITHUB_OUTPUT

          device_conn_str=`curl -s "https://${{ secrets.KEY_VAULT_NAME }}.vault.azure.net/secrets/${{ inputs.resourceGroupName }}-${{ steps.get-test-data.outputs.device_id }}?api-version=2016-10-01" -H "Authorization: Bearer $token" | jq .value | tr -d \"`
          echo ::add-mask::$device_conn_str
          echo "device_conn_str=$device_conn_str" >> $GITHUB_OUTPUT

      - name: Apply device identity
        run: |
          sudo aziotctl config mp -c "${{ steps.hub-identity.outputs.device_conn_str }}" --force
          sudo aziotctl config apply

      - name: Download OSConfig from package workflow (main)
        if: startsWith( steps.get-test-data.outputs.package_path, '*')
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: package.yml
          branch: main
          name: package

      - name: Install OSConfig (GitHub)
        if: startsWith( steps.get-test-data.outputs.package_path, '*')
        run: |
          sudo apt install -y `find . -name '${{ steps.get-test-data.outputs.package_path }}' | head -n 1`

      - name: Install OSConfig (packages.microsoft.com)
        if: (! startsWith( steps.get-test-data.outputs.package_path, '*'))
        run: |
          sudo apt install -y osconfig

      - name: Capture memory metrics (Start)
        id: memory-start
        run: |
          mem_start=`free --kilo | sed -n 2p | cut -c 20-32 | tr -d ' '`
          echo "mem_start=$mem_start" >> $GITHUB_OUTPUT

      - name: Configure and Start OSConfig
        run: |
          sudo systemctl stop osconfig
          sudo sed -i '/\"FullLogging\"/c\\  \"FullLogging\": 1,' /etc/osconfig/osconfig.json
          sudo sed -i '/\"LocalManagement\"/c\\  \"LocalManagement\": 1,' /etc/osconfig/osconfig.json
          sudo systemctl daemon-reload
          sudo systemctl start osconfig
          sudo systemctl start osconfig-platform || true

      - name: Performance check (Start)
        if: inputs.cpuThreshold != ''
        run: |
          echo -n Starting performance check in ${{ inputs.delaySampling }} seconds...
          sleep ${{ inputs.delaySampling }} && echo done!
          
          pidosconfig=`pidof osconfig`
          pidosconfigplatform=`pidof osconfig-platform`
          resultagent=`pidstat -p $pidosconfig | tail -n1 | cut -c62-68`
          resultplatform=`pidstat -p $pidosconfigplatform | tail -n1 | cut -c62-68`
          
          echo CPU result Agent: $resultagent, Platform: $resultplatform

          result=`bc -l <<< "result=$resultagent;if(result < ${{ inputs.cpuThreshold }}) print 0 else print 1;"`
          if [ "$result" == 1 ]; then
            echo "::error title=CPU usage exceeded::CPU usage has exceeded allowable threshold (${{ inputs.cpuThreshold }}%), current usage: $resultagent" && exit 1
          fi
          result=`bc -l <<< "result=$resultplatform;if(result < ${{ inputs.cpuThreshold }}) print 0 else print 1;"`
          if [ "$result" == 1 ]; then
            echo "::error title=CPU usage exceeded::CPU usage has exceeded allowable threshold (${{ inputs.cpuThreshold }}%), current usage: $resultplatform" && exit 1
          fi

      - name: Run E2E tests
        env:
          DOTNET_CLI_HOME: /tmp
        working-directory: ./src/tests/e2etest
        run: |
          function checkResult(){
            if [[ $1 -ne 0 ]]; then
              echo '::error title=E2E Test Failure::The E2E tests failed at run number $runNumber'
              exit $1
            fi
          }
          if [[ ${{ inputs.repeatForXHours }} -gt 0 ]];then
            end=`date -d "+${{inputs.repeatForXHours}} hours" +%s`
            while [[ $(date +%s) -lt $end ]]; do
              echo Performing test run $((++runNumber))
              sudo E2E_OSCONFIG_IOTHUB_CONNSTR="${{ steps.hub-identity.outputs.iothubowner_connection_string }}" E2E_OSCONFIG_DEVICE_ID="${{ steps.get-test-data.outputs.device_id }}" E2E_OSCONFIG_DISTRIBUTION_NAME="${{ matrix.distroName }}" E2E_OSCONFIG_TWIN_TIMEOUT=${{ secrets.TWIN_TIMEOUT }} dotnet test ${{ steps.get-test-data.outputs.test_filter }} --logger "trx;LogFileName=test-results-${{ matrix.distroName }}.trx" --logger "console;verbosity=detailed"
              checkResult $?
            done
          else
            sudo E2E_OSCONFIG_IOTHUB_CONNSTR="${{ steps.hub-identity.outputs.iothubowner_connection_string }}" E2E_OSCONFIG_DEVICE_ID="${{ steps.get-test-data.outputs.device_id }}" E2E_OSCONFIG_DISTRIBUTION_NAME="${{ matrix.distroName }}" E2E_OSCONFIG_TWIN_TIMEOUT=${{ secrets.TWIN_TIMEOUT }} dotnet test ${{ steps.get-test-data.outputs.test_filter }} --logger "trx;LogFileName=test-results-${{ matrix.distroName }}.trx" --logger "console;verbosity=detailed"
            checkResult $?
          fi

      - name: Performance check (Stop)
        if: inputs.cpuThreshold != ''
        run: |
          pidosconfig=`pidof osconfig`
          pidosconfigplatform=`pidof osconfig-platform`
          resultagent=`pidstat -p $pidosconfig | tail -n1 | cut -c62-68`
          resultplatform=`pidstat -p $pidosconfigplatform | tail -n1 | cut -c62-68`
          
          echo CPU result Agent: $resultagent, Platform: $resultplatform

          result=`bc -l <<< "result=$resultagent;if(result < ${{ inputs.cpuThreshold }}) print 0 else print 1;"`
          if [ "$result" == 1 ]; then
            echo "::error title=CPU usage exceeded::CPU usage has exceeded allowable threshold (${{ inputs.cpuThreshold }}%), current usage: $resultagent" && exit 1
          fi
          result=`bc -l <<< "result=$resultplatform;if(result < ${{ inputs.cpuThreshold }}) print 0 else print 1;"`
          if [ "$result" == 1 ]; then
            echo "::error title=CPU usage exceeded::CPU usage has exceeded allowable threshold (${{ inputs.cpuThreshold }}%), current usage: $resultplatform" && exit 1
          fi

      - name: Stop OSConfig
        run: |
          sudo systemctl stop osconfig

      - name: Capture memory metrics (Stop)
        run: |
          mem_stop=`free --kilo | sed -n 2p | cut -c 20-32 | tr -d ' '`
          delta=$(bc -l <<< "mem_start=${{ steps.memory-start.outputs.mem_start }};mem_stop=$mem_stop;delta=mem_start/mem_stop;print delta;")
          echo Global Memory Start: ${{ steps.memory-start.outputs.mem_start }} KB
          echo Global Memory Stop:  $mem_stop KB
          echo Global Memory Delta: $delta
          echo Max Allowable Delta: ${{ inputs.allowedMemoryDelta }}%
          
          # Check if the delta is greater than defined threshold
          result=`bc -l <<< "delta=$delta;high=1+(0.${{ inputs.allowedMemoryDelta }});low=1-(0.${{ inputs.allowedMemoryDelta }});if(high > delta && delta > low) print 0 else print 1;"`
          if [[ ${{ inputs.allowedMemoryDelta }} != 0 && "$result" == 1 ]]; then
            echo "::error title=Memory usage exceeded::Memory usage has exceeded allowable delta (${{ inputs.allowedMemoryDelta }}%), current delta: $delta" && exit 1
          fi

      - name: Stage logs
        if: always()
        run: |
          sudo cp -f /var/log/osconfig*.log ${{ runner.temp }}
          sudo chown $USER:$USER ${{ runner.temp }}/osconfig*.log

      - name: Check logs
        if: success() || failure()
        uses: ./.github/actions/check-logs
        with:
          logs: |
            ${{ runner.temp }}/osconfig_pnp_agent.log
            ${{ runner.temp }}/osconfig_platform.log

      - name: Upload OSConfig Logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-logs-${{ matrix.distroName }}
          path: ${{ runner.temp }}/osconfig*.log

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.distroName }}
          path: ./src/tests/e2etest/TestResults/test-results-${{ matrix.distroName }}*.trx

      - uses: dorny/test-reporter@v1.5.0
        if: always()
        with:
          name: E2E Test Report ${{ matrix.distroName }} ${{ inputs.testNameSuffix }}
          path: ./src/tests/e2etest/TestResults/test-results-${{ matrix.distroName }}*.trx
          reporter: dotnet-trx
