name: Run Tests
on:
  workflow_call:
    inputs:
      environment:
        description: The name of the target environment
        type: string
        required: true
      distroName:
        description: The name of the target distro
        type: string
        required: true
      resourceGroupName:
        description: The name of the target environment
        type: string
        required: true

jobs:
  run-tests:
    name: Run Tests
    environment: ${{ inputs.environment }}
    strategy:
      fail-fast: false
      matrix:
        distroName: ${{ fromJson(inputs.distroName) }}
    runs-on: ${{ inputs.resourceGroupName }}-${{ matrix.distroName }}
    steps:
      - uses: actions/checkout@v1

      - name: Retreive target test data
        id: get-test-data
        run: |
          target=`jq '.[] | select(.distroName=="${{ matrix.distroName }}")' ${{ github.workspace }}/devops/e2e/${{ secrets.E2E_ENV_FILE }}`
          echo ::set-output name=device_id::$(echo $target | jq .device_id | tr -d \")
          
          test_filter=$(echo $target | jq .test_filter | tr -d \")
          [[ "$test_filter" != "null" ]] && test_filter="--filter \"${test_filter}\"" || test_filter=""
          echo Using test filter: $test_filter
          echo ::set-output name=test_filter::$test_filter

          package_path=$(echo $target | jq .package_path | tr -d \")
          [[ "$package_path" != "null" ]] && package_path="${package_path}" || package_path=""
          echo Using package path: $package_path
          echo ::set-output name=package_path::$package_path

      - name: Create device identity
        id: hub-identity
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
        run: |
          az login --service-principal -u ${{ secrets.CLIENT_ID }} -p ${{ secrets.CLIENT_SECRET }} --tenant ${{ secrets.TENANT_ID }}
          az config set extension.use_dynamic_install=yes_without_prompt
          az iot hub device-identity create --device-id "${{ steps.get-test-data.outputs.device_id }}" --hub-name ${{ inputs.resourceGroupName }}-iothub --output none
          # VM + IotHub provisioning happen in parallel - loop until iothub connection string is present in keyvault
          iothubowner_connection_string=`az keyvault secret show --vault-name "osconfige2e-infra" --name "${{ inputs.resourceGroupName }}-iothubowner" --query value`
          while [ $? -ne 0 ]; do sleep 5s && !!; done
          echo ::set-output name=iothubowner_connection_string::$iothubowner_connection_string
          device_conn_str=`az iot hub device-identity connection-string show --hub-name ${{ inputs.resourceGroupName }}-iothub --device-id ${{ 
          steps.get-test-data.outputs.device_id }} --output tsv`
          echo ::set-output name=device_conn_str::$device_conn_str

      - name: Apply device identity
        run: |
          sudo aziotctl config mp -c "${{ steps.hub-identity.outputs.device_conn_str }}" --force
          sudo aziotctl config apply

      - name: Setup dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 5.0.x

      - name: Download OSConfig from package workflow (main)
        if: startsWith( steps.get-test-data.outputs.package_path, '*')
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: package.yml
          branch: main
          name: package

      - name: Install OSConfig (GitHub)
        if: startsWith( steps.get-test-data.outputs.package_path, '*')
        run: |
          sudo apt install -y `find . -name '${{ steps.get-test-data.outputs.package_path }}' | head -n 1`

      - name: Install OSConfig (packages.microsoft.com)
        if: (! startsWith( steps.get-test-data.outputs.package_path, '*'))
        run: |
          sudo apt install -y osconfig

      - name: Configure OSConfig
        run: |
          sudo systemctl stop osconfig
          sudo sed -i '/\"FullLogging\"/c\\  \"FullLogging\": 1,' /etc/osconfig/osconfig.json
          sudo systemctl daemon-reload
          sudo systemctl start osconfig

      - name: Run E2E tests
        env:
          E2E_OSCONFIG_IOTHUB_CONNSTR: ${{ steps.hub-identity.outputs.iothubowner_connection_string }}
          E2E_OSCONFIG_DEVICE_ID: ${{ steps.get-test-data.outputs.device_id }}
          E2E_OSCONFIG_TWIN_TIMEOUT: ${{ secrets.TWIN_TIMEOUT }}
        working-directory: ./src/tests/e2etest
        run: | 
          dotnet test ${{ steps.get-test-data.outputs.test_filter }} --logger "trx;LogFileName=test-results-${{ matrix.distroName }}.trx"
          sudo cp -f /var/log/osconfig*.log ${{ runner.temp }}
          sudo chown $USER:$USER ${{ runner.temp }}/osconfig*.log

      - name: Upload OSConfig Logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-logs-${{ matrix.distroName }}
          path: ${{ runner.temp }}/osconfig*.log

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.distroName }}
          path: ./src/tests/e2etest/TestResults/test-results-${{ matrix.distroName }}.trx

      - uses: dorny/test-reporter@v1.5.0
        if: always()
        with:
          name: E2E Test Report ${{ matrix.distroName }}
          path: ./src/tests/e2etest/TestResults/test-results-${{ matrix.distroName }}.trx
          reporter: dotnet-trx