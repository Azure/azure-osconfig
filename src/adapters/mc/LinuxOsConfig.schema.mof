#pragma include ("cim_schema_2.26.0.mof")
#pragma include ("MSFT_Qualifiers.mof")
#pragma include ("OMI_BaseResource.mof")
#pragma include ("MSFT_Credential.mof")

[ClassVersion("1.0.0")]
class LinuxOsConfigResource : OMI_BaseResource
{
  [key] 
  string LinuxOsConfigClassKey;

  [write, Description ("MIM Component (for audit and remediation)" )]
  string ComponentName;

  [write, Description ("Reported MIM Object (for audit)" )]
  string ReportedObjectName;

  [read, Description ("Reported MIM Setting value (for audit)" )]
  string ReportedObjectValue;

  [write, Description ("Desired MIM Object (for remediation)" )]
  string DesiredObjectName;

  [write, Description ("Desired MIM Setting value (for remediation)" )]
  string DesiredObjectValue;

  [read, Description ("Reported MPI result (for audit and remediation)" )]
  uint32 ReportedMpiResult;

  [static, Description ("Get resource state based on input configuration." )]
  uint32 GetTargetResource(
    [in, EmbeddedInstance ("LinuxOsConfigResource"), Description ("Desired configuration to be applied.")]
    string InputResource,
    [in, Description ("Flags passed to the providers. Reserved for future use." )] 
    uint32 Flags,
    [out, EmbeddedInstance ("LinuxOsConfigResource"), Description ("The current configuration state." )]
    string OutputResource
  );
    
  [static, Description ("Test resource state based on input configuration." )]
  uint32 TestTargetResource(
    [in, EmbeddedInstance("LinuxOsConfigResource"), Description ("Desired configuration to be applied." )]
    string InputResource,
    [in, Description ("Flags passed to the providers. Reserved for future use." )]
    uint32 Flags,
    [out, Description ("True if identical. False otherwise." )]
    boolean Result,
    [out, Description ("Context information that the provider can use to optimize the set. This is optional." )]
    uint64 ProviderContext
  );

  [static, Description ("Set desired configuration based on input configuration." )]
  uint32 SetTargetResource(
    [in, EmbeddedInstance ("LinuxOsConfigResource"), Description ("Desired configuration to be applied." )]
    string InputResource,
    [in, Description ("Context information that the provider can use to optimize the set. This is optional." )]
    uint64 ProviderContext,
    [in, Description ("Flags passed to the providers. Reserved for future use." )]
    uint32 Flags
  );
};
 