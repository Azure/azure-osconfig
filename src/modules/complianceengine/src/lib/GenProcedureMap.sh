#!/usr/bin/env bash

if [[ $# -ne 1 ]]; then
    echo "Usage: $0 <directory>" >&2
    exit 1
fi

directory=$1

declare -A audit_map
declare -A audit_loc_map
declare -A remediate_map
declare -A remediate_loc_map
declare -a procedures

for filepath in "$directory"/*.cpp; do
    [[ -f "$filepath" && ! "$filepath" =~ Test\.cpp$ ]] || continue
    filename=$(basename "$filepath")
    lineno=0

    while IFS= read -r line; do
        ((lineno++))
        buffer="$line"
        while [[ $buffer != *")" ]]; do
            IFS= read -r next_line || break
            ((lineno++))
            buffer+="$next_line"
        done
        if [[ $buffer =~ AUDIT_FN\(([^,]+)(,.*)?\) ]]; then
            procedure_name=${BASH_REMATCH[1]}
            if [[ -n "${audit_loc_map[$procedure_name]}" ]]; then
                echo "Error: AUDIT_FN already defined for procedure $procedure_name at ${audit_loc_map[$procedure_name]}" >&2
                exit 1
            fi
            audit_loc_map[$procedure_name]="$filename:$lineno"
            audit_map[$procedure_name]="Audit$procedure_name"
            if [[ ! " ${procedures[@]} " =~ " ${procedure_name} " ]]; then
                procedures+=("$procedure_name")
            fi
        elif [[ $buffer =~ REMEDIATE_FN\(([^,]+)(,.*)?\) ]]; then
            procedure_name=${BASH_REMATCH[1]}
            if [[ -n "${remediate_loc_map[$procedure_name]}" ]]; then
                echo "Error: REMEDIATE_FN already defined for procedure $procedure_name at ${remediate_loc_map[$procedure_name]}" >&2
                exit 1
            fi
            remediate_loc_map[$procedure_name]="$filename:$lineno"
            remediate_map[$procedure_name]="Remediate$procedure_name"
            if [[ ! " ${procedures[@]} " =~ " ${procedure_name} " ]]; then
                procedures+=("$procedure_name")
            fi
        fi
    done < "$filepath"
done

{
    echo "// This file is autogenerated, do not edit!"
    echo "#include <Evaluator.h>"
    echo "namespace ComplianceEngine {"
    echo
    for procedure_name in "${procedures[@]}"; do
    	if [[ ! -z "${audit_map[$procedure_name]}" ]]; then
	        echo "// ${audit_loc_map[$procedure_name]}"
	        echo "Result<Status> ${audit_map[$procedure_name]} (std::map<std::string, std::string> args, IndicatorsTree& indicators, ContextInterface& context);"
	fi
    	if [[ ! -z "${remediate_map[$procedure_name]}" ]]; then
	        echo "// ${remediate_loc_map[$procedure_name]}"
	        echo "Result<Status> ${remediate_map[$procedure_name]} (std::map<std::string, std::string> args, IndicatorsTree& indicators, ContextInterface& context);"
	fi
    done
    echo "}"
} > ProcedureMap.h

{
    echo "// This file is autogenerated, do not edit!"
    echo "#include <Evaluator.h>"
    echo "#include \"ProcedureMap.h\""
    echo "#include <map>"
    echo "#include <string>"
    echo
    echo "namespace ComplianceEngine {"
    echo
    echo "const ProcedureMap Evaluator::mProcedureMap = {"
    for procedure_name in "${procedures[@]}"; do
        audit_fn=${audit_map["$procedure_name"]:-nullptr}
        remediation_fn=${remediate_map["$procedure_name"]:-nullptr}
        echo "    {\"$procedure_name\", {$audit_fn, $remediation_fn}},"
    done
    echo "};"
    echo "}"
} > ProcedureMap.cpp
