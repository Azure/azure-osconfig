// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

#ifndef COMPLIANCE_EVALUATOR_H
#define COMPLIANCE_EVALUATOR_H

#include "Logging.h"
#include "MmiResults.h"
#include "Result.h"

#include <map>
#include <sstream>
#include <string>

struct json_object_t;

// Audit and remediation functions are declared using following macros, respectively.
// The first argument is the name of the procedure, eg ensureFilePermissions.
// Following arguments define the parameters to the procedure, each parameters encoded as a string with fields
// separated with ':' :
// <name>:<description>:<flags>:<pattern>
// All fields except for name are optional, can be left empty or ommited.
// - description is a textual description to be put in schema
// - flags - currently only one flag is supported, 'M' for mandatory parameters
// - pattern is a regex to validate the value of the parameter.
// examples:
// "myParameter:This is my parameter"
// "myOtherParameter:Another parameter, mandatory:M"
// "yetanotherparameter:This one is validated::^[0-9]+$"

#define AUDIT_FN(fn_name, parameters...)                                                                                                               \
    ::compliance::Result<bool> Audit##fn_name(std::map<std::string, std::string> args, std::ostringstream& logstream, OsConfigLogHandle log)

#define REMEDIATE_FN(fn_name, parameters...)                                                                                                           \
    ::compliance::Result<bool> Remediate##fn_name(std::map<std::string, std::string> args, std::ostringstream& logstream, OsConfigLogHandle log)

namespace compliance
{
using ParameterMap = std::map<std::string, std::string>;
using action_func_t = Result<bool> (*)(ParameterMap, std::ostringstream&, OsConfigLogHandle);
using ProcedureMap = std::map<std::string, std::pair<action_func_t, action_func_t>>;
class Evaluator
{
public:
    Evaluator(const struct json_object_t* json, const ParameterMap& parameters, OsConfigLogHandle log)
        : mJson(json),
          mParameters(parameters),
          mLog(log)
    {
    }
    ~Evaluator() = default;
    Evaluator(const Evaluator&) = delete;
    Evaluator(Evaluator&&) = delete;
    Evaluator& operator=(const Evaluator&) = delete;
    Evaluator& operator=(Evaluator&&) = delete;

    Result<AuditResult> ExecuteAudit();
    Result<Status> ExecuteRemediation();

private:
    enum class Action
    {
        Audit,
        Remediate
    };
    Result<Status> EvaluateProcedure(const struct json_object_t* json, const Action action);
    const struct json_object_t* mJson;
    const ParameterMap& mParameters;
    std::ostringstream mLogstream;
    OsConfigLogHandle mLog;
    // autogenerated, instantiated in ProcedureMap.cpp
    static const ProcedureMap mProcedureMap;
    static const size_t cLogstreamMaxSize = 4096;
};
} // namespace compliance

#endif // COMPLIANCE_EVALUATOR_H
