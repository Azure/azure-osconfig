// Copyright (c) Microsoft Corporation. All rights reserved..
// Licensed under the MIT License.

use std::ffi::CStr;
use std::ffi::CString;
use std::os::raw::{c_char, c_int, c_uint, c_void};

pub mod sample;

// Constants and Method headers were generated by bindgen
// (https://github.com/rust-lang/rust-bindgen)
pub const MMI_OK: u32 = 0;
pub type MMI_HANDLE = *mut c_void;
pub type MMI_JSON_STRING = *mut c_char;

// MSFT change: Added the #[no_mangle] annotation and defined the methods
#[no_mangle]
pub extern "C" fn MmiGetInfo(
    client_name: *const c_char,
    payload: *mut MMI_JSON_STRING,
    payload_size_bytes: *mut c_int,
) -> c_int {
    unimplemented!("MmiGetInfo is not yet implemented");
}

#[no_mangle]
pub extern "C" fn MmiOpen(
    client_name: *const c_char,
    max_payload_size_bytes: c_uint,
) -> MMI_HANDLE {
    unimplemented!("MmiOpen is not yet implemented");
}

#[no_mangle]
pub extern "C" fn MmiClose(client_session: MMI_HANDLE) {
    unimplemented!("MmiClose is not yet implemented");
}

#[no_mangle]
pub extern "C" fn MmiSet(
    client_session: MMI_HANDLE,
    component_name: *const c_char,
    object_name: *const c_char,
    payload: MMI_JSON_STRING,
    payload_size_bytes: c_int,
) -> c_int {
    unimplemented!("MmiSet is not yet implemented");
}

#[no_mangle]
pub extern "C" fn MmiGet(
    client_session: MMI_HANDLE,
    component_name: *const c_char,
    object_name: *const c_char,
    payload: *mut MMI_JSON_STRING,
    payload_size_bytes: *mut c_int,
) -> c_int {
    unimplemented!("MmiGet is not yet implemented");
}

#[no_mangle]
pub extern "C" fn MmiFree(payload: MMI_JSON_STRING) {
    unimplemented!("MmiFree is not yet implemented");
}
