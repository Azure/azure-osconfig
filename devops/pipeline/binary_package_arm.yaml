# Packaging pipeline for ARM/ARM64 builds - produces arm64 + arm packages for:
#  - Debian 9
#  - Ubuntu 18.04
#  - Ubuntu 20.04

name: $(MajorVersion).$(MinorVersion).$(PatchVersion).$(Date:yyyyMMdd)$(Rev:.r)

variables:
  SERVICE_CONNECTION: OSConfig-ACR
  CONTAINER_REGISTRY: osconfig.azurecr.io

trigger:
  branches:
    include:
    - main
pr: none

strategy:
  matrix:
    Packaging ubuntu20-arm:
      variant: ubuntu20.04-arm
      arch: arm
      artifact: ubuntu20.04_arm
      containerImage: ubuntu20.04-dev-arm:latest
      platform: linux/arm/v7
    Packaging ubuntu20-arm64:
      variant: ubuntu20.04-arm64
      arch: arm64
      artifact: ubuntu20.04_arm64
      containerImage: ubuntu20.04-dev-arm64:latest
      platform: linux/arm64/v8
    Packaging ubuntu18-arm:
      variant: ubuntu18.04-arm
      arch: arm
      artifact: ubuntu18.04_arm
      containerImage: ubuntu18.04-dev-arm:latest
      platform: linux/arm/v7
    Packaging ubuntu18-arm64:
      variant: ubuntu18.04-arm64
      arch: arm64
      artifact: ubuntu18.04_arm64
      containerImage: ubuntu18.04-dev-arm64:latest
      platform: linux/arm64/v8
    Packaging debian9-arm:
      variant: debian9-arm
      arch: arm
      artifact: debian9_arm
      containerImage: debian9-dev-arm:latest
      platform: linux/arm/v7
    Packaging debian9-arm64:
      variant: debian9-arm64
      arch: arm64
      artifact: debian9_arm64
      containerImage: debian9-dev-arm64:latest
      platform: linux/arm64/v8

pool:
  vmImage: 'ubuntu-20.04'

steps:
- checkout: self
  submodules: recursive
  clean: true

- task: Docker@2
  displayName: Login to ACR
  inputs:
    command: login
    containerRegistry: $(SERVICE_CONNECTION)

- script: |
    docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    CONTAINER_ID=`docker run -di -v $(Build.SourcesDirectory):/AzOsConfig --platform=$(platform) $(CONTAINER_REGISTRY)/$(containerImage)`
    echo CONTAINER_ID=$CONTAINER_ID
    echo "##vso[task.setvariable variable=CONTAINER_ID]$CONTAINER_ID"
  displayName: Setup QEMU emulation

- script: |
    docker exec $(CONTAINER_ID) bash -c "cmake -DCMAKE_BUILD_TYPE=Release -Duse_prov_client=ON -Dhsm_type_symm_key=ON -DCOMPILE_WITH_STRICTNESS=ON -DMAJOR_VERSION=$(MAJORVERSION) -DMINOR_VERSION=$(MINORVERSION) -DPATCH_VERSION=$(PATCHVERSION) -G Ninja -B/AzOsConfig/build-$(arch) -H/AzOsConfig/src"
  displayName: Generate build

- script: |
    docker exec $(CONTAINER_ID) bash -c "cmake --build /AzOsConfig/build-$(arch)"
  displayName: Build osconfig

- script: |
    docker exec $(CONTAINER_ID) bash -c "cd /AzOsConfig/build-$(arch) && cpack -G DEB"
  displayName: Generate Deb package

- script: |
    cp $(Build.SourcesDirectory)/build-$(arch)/osconfig_* $(Build.ArtifactStagingDirectory)
  displayName: Stage Deb package

- publish: $(Build.ArtifactStagingDirectory)
  displayName: Publishing deb package for $(variant)
  artifact: OSConfig_$(Build.BuildNumber)_$(artifact)