# E2E test pipeline - performs end-to-end tests on the following platforms
#  - Ubuntu 18.04
#  - Ubuntu 20.04

name: $(MajorVersion).$(MinorVersion).$(PatchVersion).$(Date:yyyyMMdd)$(Rev:.r)

resources:
  containers:
  - container: ubuntu
    image: ubuntu:18.04
  - container: dotnet
    image: mcr.microsoft.com/dotnet/sdk:5.0

parameters:
- name: SKIP_TEARDOWN
  displayName: 'Leave test infrastructure in-place'
  type: boolean
  default: false
- name: TWIN_TIMEOUT
  displayName: 'Timeout for twin updates'
  type: number
  default: 45
# - name: PRE_SCRIPT
#   displayName: 'Shell script to execute before osconfig install'
#   type: string
#   default: ' '
- name: POST_SCRIPT
  displayName: 'Shell script to execute after osconfig install'
  type: string
  default: ' '

variables:
  SERVICE_CONNECTION: OSconfig-arm
  SKIP_TEARDOWN: ${{ parameters.SKIP_TEARDOWN }}
  # PRE_SCRIPT: ${{ parameters.PRE_SCRIPT }}
  POST_SCRIPT: ${{ parameters.POST_SCRIPT }}
  TWIN_TIMEOUT: ${{ parameters.TWIN_TIMEOUT }}

trigger:
  branches:
    include:
    - main
pr: none

stages:
- stage: Terraform_iothub
  displayName: Terraform - Create Hub
  pool:
        vmImage: 'ubuntu-18.04'
  jobs:
  - job: TerraformJobIotHub
    steps:
      - script: |
          sudo apt update && sudo apt install curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=$(dpkg --print-architecture)] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt install terraform
        displayName: Installing Terraform

      - script: 'terraform init'
        displayName: terraform init (IotHub)
        workingDirectory: $(Build.SourcesDirectory)/devops/terraform/iothub

      - script: 'terraform apply -var subscription_id="$(SUBSCRIPTION_ID)" -var tenant_id="$(TENANT_ID)" -var client_id="$(CLIENT_ID)" -var client_secret="$(CLIENT_SECRET)" -var key_vault_id="$(KEY_VAULT_ID)" -auto-approve'
        displayName: terraform apply
        continueOnError: true
        workingDirectory: $(Build.SourcesDirectory)/devops/terraform/iothub

      - script: |
          IOTHUB_NAME=`terraform output iothub_name`
          echo "##vso[task.setvariable variable=IOTHUB_NAME;isOutput=true]$IOTHUB_NAME"
        name: iothub_name_step
        displayName: Retreive IoTHub Name
        continueOnError: true
        workingDirectory: $(Build.SourcesDirectory)/devops/terraform/iothub

      - script: |
          IOTHUBOWNER_CONN_STR=`terraform output iothubowner_connection_string`
          echo "##vso[task.setvariable variable=IOTHUBOWNER_CONN_STR;issecret=true;isOutput=true]$IOTHUBOWNER_CONN_STR"
        name: iothubowner_conn_str_step
        displayName: Retreive iothubowner connection string
        continueOnError: true
        workingDirectory: $(Build.SourcesDirectory)/devops/terraform/iothub

      - script: |
          RESOURCE_GROUP_NAME=`terraform output resource_group_name`
          echo "##vso[task.setvariable variable=RESOURCE_GROUP_NAME;isOutput=true]$RESOURCE_GROUP_NAME"
        name: resource_group_name_step
        displayName: Retreive Resource Group Name
        continueOnError: true
        workingDirectory: $(Build.SourcesDirectory)/devops/terraform/iothub

      - script: |
          mkdir -p $(Build.ArtifactStagingDirectory)/terraform/iothub
          cp -R $(Build.SourcesDirectory)/devops/terraform/iothub/* $(Build.ArtifactStagingDirectory)/terraform/iothub
        displayName: Copy terraform state (iothub)
        continueOnError: true

      - publish: '$(Build.ArtifactStagingDirectory)/terraform/iothub'
        displayName: 'Publish Terraform state for destroy stage (iothub)'
        continueOnError: true
        artifact: terraformStateIoTHub

- stage: Terraform_VM
  displayName: Terraform - Create Identity + VMs
  dependsOn: Terraform_iothub
  variables:
    IOTHUB_NAME: $[ stageDependencies.Terraform_iothub.TerraformJobIotHub.outputs['iothub_name_step.IOTHUB_NAME'] ]
    RESOURCE_GROUP_NAME: $[ stageDependencies.Terraform_iothub.TerraformJobIotHub.outputs['resource_group_name_step.RESOURCE_GROUP_NAME'] ]
  pool:
        vmImage: 'ubuntu-18.04'
  jobs:
  - job: TerraformJobVM
    strategy:
        matrix:
          # Find different VM variants on the Azure Marketplace
          # See https://docs.microsoft.com/en-us/azure/virtual-machines/linux/cli-ps-findimage
          # debian-9:
          #   distroName: debian-9
          #   image_publisher: credativ
          #   image_offer: Debian
          #   image_sku: 9-backports
          #   image_version: 9.20210721.0
          #   packagePattern: '**/*stretch_x86_64.deb'
          #   device_id: debian9
          ubuntu-18.04:
            distroName: ubuntu-18.04
            image_publisher: Canonical
            image_offer: UbuntuServer
            image_sku: 18.04-LTS
            image_version: latest
            packagePattern: '**/*bionic_x86_64.deb'
            device_id: ubuntu1804
            pre_script: >-
              curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg &&
              sudo cp ./microsoft.gpg /etc/apt/trusted.gpg.d/ &&
              curl https://packages.microsoft.com/config/ubuntu/18.04/multiarch/prod.list > ./microsoft-prod.list &&
              sudo cp ./microsoft-prod.list /etc/apt/sources.list.d/ &&
              sudo apt update &&
              sudo apt install aziot-identity-service
          ubuntu-20.04:
            distroName: ubuntu-20.04
            image_publisher: Canonical
            image_offer: 0001-com-ubuntu-server-focal
            image_sku: 20_04-lts-gen2
            image_version: 20.04.202004230
            packagePattern: '**/*focal_x86_64.deb'
            device_id: ubuntu2004
            pre_script: >-
              wget https://github.com/Azure/azure-iotedge/releases/download/1.2.4/aziot-identity-service_1.2.3-1_ubuntu20.04_amd64.deb &&
              sudo apt install ./aziot-identity-service_1.2.3-1_ubuntu20.04_amd64.deb

    steps:
      - task: DownloadPipelineArtifact@2
        displayName: Download OSConfig from pipeline
        inputs:
          source: 'specific'
          project: 'AzOsConfig'
          pipeline: $(package_pipeline)
          runVersion: 'latestFromBranch'
          runBranch: $(Build.SourceBranch)
          itemPattern: $(packagePattern)

      - script: |
          cp `find . -name '*.deb'` $(Build.SourcesDirectory)/devops/terraform/host/osconfig.deb
        displayName: Stage OSConfig
        continueOnError: true
        workingDirectory: $(Pipeline.Workspace)

      - task: AzureCLI@2
        displayName: Create device identity
        continueOnError: true
        name: azcli_device_identity
        inputs:
          azureSubscription: $(SERVICE_CONNECTION)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt
            az login --service-principal -u "$(CLIENT_ID)" -p "$(CLIENT_SECRET)" --tenant "$(TENANT_ID)"
            az iot hub device-identity create --device-id "$(device_id)" --hub-name $(IOTHUB_NAME)
            DEVICE_CONN_STR=`az iot hub device-identity connection-string show --hub-name $(IOTHUB_NAME) --device-id $(device_id) --output tsv`
            echo "##vso[task.setvariable variable=DEVICE_CONN_STR;issecret=true]$DEVICE_CONN_STR"

      - script: 'terraform init'
        displayName: terraform init (VM)
        continueOnError: true
        workingDirectory: $(Build.SourcesDirectory)/devops/terraform/host

      - script: terraform apply -var subscription_id="$(SUBSCRIPTION_ID)" -var tenant_id="$(TENANT_ID)" -var client_id="$(CLIENT_ID)" -var client_secret="$(CLIENT_SECRET)" -var key_vault_id="$(KEY_VAULT_ID)" -var device_identity_connstr='$(DEVICE_CONN_STR)' -var resource_group_name=$(RESOURCE_GROUP_NAME) -var osconfig_package_path="./osconfig.deb" -var vm_name=$(distroName) -var image_offer=$(image_offer) -var image_publisher=$(image_publisher) -var image_sku=$(image_sku) -var image_version=$(image_version) -var sas_token="$(SAS_TOKEN)" -var vm_pre_osconfig_install_script="$(pre_script)" -var vm_post_osconfig_install_script="$(POST_SCRIPT)" -auto-approve
        displayName: terraform apply
        continueOnError: true
        workingDirectory: $(Build.SourcesDirectory)/devops/terraform/host

      - script: |
          mkdir -p $(Build.ArtifactStagingDirectory)/terraform/host
          cp -R $(Build.SourcesDirectory)/devops/terraform/host/* $(Build.ArtifactStagingDirectory)/terraform/host
        displayName: Copy terraform state (vm)
        continueOnError: true

      - publish: '$(Build.ArtifactStagingDirectory)/terraform/host'
        displayName: 'Publish Terraform state for destroy stage (vm)'
        continueOnError: true
        artifact: terraformStateVM_$(distroName)

- stage: Run_Test_Driver
  displayName: Execute E2E Test
  dependsOn:
    - Terraform_iothub
    - Terraform_VM
  variables:
    IOTHUBOWNER_CONN_STR: $[ stageDependencies.Terraform_iothub.TerraformJobIotHub.outputs['iothubowner_conn_str_step.IOTHUBOWNER_CONN_STR'] ]
    RESOURCE_GROUP_NAME: $[ stageDependencies.Terraform_iothub.TerraformJobIotHub.outputs['resource_group_name_step.RESOURCE_GROUP_NAME'] ]
  jobs:
  - job: E2ETestJob
    strategy:
      matrix:
        # debian-9:
        #     distroName: debian-9
        #     device_id: debian9
        ubuntu-18.04:
          distroName: ubuntu-18.04
          device_id: ubuntu1804
        ubuntu-20.04:
          distroName: ubuntu-20.04
          device_id: ubuntu2004
    container: dotnet
    steps:
      - script: 'dotnet test --logger trx'
        displayName: Run Test Driver
        env:
          E2E_OSCONFIG_IOTHUB_CONNSTR: $(IOTHUBOWNER_CONN_STR)
          E2E_OSCONFIG_DEVICE_ID: $(device_id)
          E2E_OSCONFIG_SAS_TOKEN: $(SAS_TOKEN)
          E2E_OSCONFIG_UPLOAD_URL: $(UPLOAD_URL_BASE_PATH)
          E2E_OSCONFIG_RESOURCE_GROUP_NAME: $(RESOURCE_GROUP_NAME)
          E2E_OSCONFIG_TWIN_TIMEOUT: $(TWIN_TIMEOUT)
        workingDirectory: $(Build.SourcesDirectory)/src/tests/e2etest

      - task: PublishTestResults@2
        condition: or(succeeded(), failed())
        continueOnError: true
        inputs:
          testRunner: VSTest
          testResultsFiles: '$(Build.SourcesDirectory)/src/tests/e2etest/TestResults/*.trx'
          failTaskOnFailedTests: true
          testRunTitle: $(distroName)

      - script: |
          rg=`echo $(RESOURCE_GROUP_NAME) | sed -r 's/"//g'`
          mkdir -p $(Build.ArtifactStagingDirectory)/logs
          wget "$(UPLOAD_URL_BASE_PATH)`echo $rg`-$(device_id).tar.gz?$(SAS_TOKEN)" -O $(Build.ArtifactStagingDirectory)/logs/`echo $rg`-$(device_id).tar.gz
        displayName: Get OSConfig logs from blobstore
        condition: or(succeeded(), failed())
        continueOnError: true

      - publish: '$(Build.ArtifactStagingDirectory)/logs/'
        displayName: 'Publish OSConfig Logs'
        condition: or(succeeded(), failed())
        continueOnError: true
        artifact: Logs_$(distroName)

- stage: Terraform_destroy_vm
  displayName: Tear down cloud resources (VMs)
  dependsOn:
    - Terraform_iothub
    - Terraform_VM
    - Run_Test_Driver
  variables:
    IOTHUB_NAME: $[ stageDependencies.Terraform_iothub.TerraformJobIotHub.outputs['iothub_name_step.IOTHUB_NAME'] ]
    RESOURCE_GROUP_NAME: $[ stageDependencies.Terraform_iothub.TerraformJobIotHub.outputs['resource_group_name_step.RESOURCE_GROUP_NAME'] ]
  pool:
    vmImage: 'ubuntu-18.04'
  condition: and(succeeded(), eq(variables['SKIP_TEARDOWN'], 'false'))
  jobs:
  - job: TerraformDestroy
    strategy:
          matrix:
            # debian-9:
            #   distroName: debian-9
            #   device_id: debian9
            ubuntu-18.04:
              distroName: ubuntu-18.04
              device_id: ubuntu1804
            ubuntu-20.04:
              distroName: ubuntu-20.04
              device_id: ubuntu2004
    steps:
      - script: |
          sudo apt update && sudo apt install curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=$(dpkg --print-architecture)] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt install terraform
        displayName: Installing Terraform

      - download: current
        artifact: terraformStateVM_$(distroName)
        displayName: Fetching terraform state (VM)

      - script: |
          terraform init
          terraform destroy -var client_id="$(CLIENT_ID)" -var client_secret="$(CLIENT_SECRET)" -var subscription_id="$(SUBSCRIPTION_ID)" -var tenant_id="$(TENANT_ID)" -var key_vault_id="$(KEY_VAULT_ID)" -var device_identity_connstr="null" -var resource_group_name=$(RESOURCE_GROUP_NAME) -var osconfig_package_path="./osconfig.deb" -var sas_token="NULL" -auto-approve | true
        workingDirectory: $(Pipeline.Workspace)/terraformStateVM_$(distroName)
        displayName: Destroy cloud resources (VM)
        continueOnError: true

      - task: AzureCLI@2
        displayName: Get twin from IoTHub
        continueOnError: true
        name: azcli_dt
        inputs:
          azureSubscription: $(SERVICE_CONNECTION)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt
            az login --service-principal -u "$(CLIENT_ID)" -p "$(CLIENT_SECRET)" --tenant "72f988bf-86f1-41af-91ab-2d7cd011db47"
            az iot hub device-twin show --hub-name $(IOTHUB_NAME) --device-id $(device_id) > $(Build.ArtifactStagingDirectory)/$(device_id)_twin.json

      - publish: '$(Build.ArtifactStagingDirectory)/$(device_id)_twin.json'
        displayName: 'Publish twin for $(device_id)'
        continueOnError: true
        artifact: DeviceTwin_$(distroName)


- stage: Terraform_destroy_iothub
  displayName: Tear down cloud resources (iothub)
  dependsOn: Terraform_destroy_vm
  pool:
      vmImage: 'ubuntu-18.04'
  condition: succeeded()
  jobs:
  - job: TerraformDestroy
    steps:
      - script: |
          sudo apt update && sudo apt install curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=$(dpkg --print-architecture)] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt install terraform
        displayName: Installing Terraform

      - download: current
        artifact: terraformStateIoTHub
        displayName: Fetching terraform state (IoTHub)

      - script: |
          terraform init
          terraform destroy -var client_id="$(CLIENT_ID)" -var client_secret="$(CLIENT_SECRET)"  -var subscription_id="$(SUBSCRIPTION_ID)" -var tenant_id="$(TENANT_ID)" -var key_vault_id="$(KEY_VAULT_ID)" -auto-approve | true
        workingDirectory: $(Pipeline.Workspace)/terraformStateIoTHub
        displayName: Destroy cloud resources (IoTHub)
