# Packaging pipeline for the following distros - produces amd64/arm/arm64 packages for:
#  - Debian 9
#  - Ubuntu 18.04
#  - Ubuntu 20.04

name: $(MajorVersion).$(MinorVersion).$(PatchVersion).$(Date:yyyyMMdd)$(Rev:rr)

variables:
  SERVICE_CONNECTION: OSConfig-ACR
  CONTAINER_REGISTRY: osconfig.azurecr.io

trigger:
  branches:
    include:
    - main
pr: none

stages:
- stage: source_package
  displayName: Source Package Build
  jobs:
  - job: source
    steps:
    
    - checkout: self
      submodules: recursive
      clean: true

    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: $(SERVICE_CONNECTION)

    - script: |
        CONTAINER_ID=`docker run -di -v $(Build.SourcesDirectory):/AzOsConfig -v $(Build.ArtifactStagingDirectory):/staging $(CONTAINER_REGISTRY)/ubuntu20.04-dev-amd64:latest`
        echo CONTAINER_ID=$CONTAINER_ID
        echo "##vso[task.setvariable variable=CONTAINER_ID]$CONTAINER_ID"
      displayName: Setup build container

    - script: |
        docker exec $(CONTAINER_ID) bash -c "cmake -DCMAKE_BUILD_TYPE=Release -Duse_prov_client=ON -Dhsm_type_symm_key=ON -DCOMPILE_WITH_STRICTNESS=ON -DMAJOR_VERSION=$(MAJORVERSION) -DMINOR_VERSION=$(MINORVERSION) -DPATCH_VERSION=$(PATCHVERSION) -G Ninja -B/AzOsConfig/build -H/AzOsConfig/src"
      displayName: Generate build

    - script: |
        docker exec $(CONTAINER_ID) bash -c "cmake --build /AzOsConfig/build --target dist && cp -r /AzOsConfig/build/dist/* /staging"
      displayName: Build & Stage Source Package

    - publish: $(Build.ArtifactStagingDirectory)
      displayName: Publishing source package
      artifact: OSConfig_$(Build.BuildNumber)_SOURCES

- stage: binary_package
  displayName: Binary Package Build
  dependsOn: []
  jobs:
  - job: build

    strategy:
      matrix:
        Code Coverage:
          variant: ubuntu20.04
          arch: amd64_debug
          containerImage: ubuntu20.04-dev-amd64:latest
          platform: linux/amd64
          coverage: true
          ignoreTestFailures: false
        Packaging ubuntu2004-amd64:
          variant: ubuntu20.04
          arch: amd64
          containerImage: ubuntu20.04-dev-amd64:latest
          platform: linux/amd64
          coverage: false
          ignoreTestFailures: false
        Packaging ubuntu2004-arm:
          variant: ubuntu20.04
          arch: arm
          containerImage: ubuntu20.04-dev-arm:latest
          platform: linux/arm/v7
          coverage: false
          ignoreTestFailures: true
        Packaging ubuntu2004-arm64:
          variant: ubuntu20.04
          arch: arm64
          containerImage: ubuntu20.04-dev-arm64:latest
          platform: linux/arm64/v8
          coverage: false
          ignoreTestFailures: false
        Packaging ubuntu1804-amd64:
          variant: ubuntu18.04
          arch: amd64
          containerImage: ubuntu18.04-dev-amd64:latest
          platform: linux/amd64
          coverage: false
          ignoreTestFailures: false
        Packaging ubuntu1804-arm:
          variant: ubuntu18.04
          arch: arm
          containerImage: ubuntu18.04-dev-arm:latest
          platform: linux/arm/v7
          coverage: false
          ignoreTestFailures: false
        Packaging ubuntu18-arm64:
          variant: ubuntu18.04
          arch: arm64
          containerImage: ubuntu18.04-dev-arm64:latest
          platform: linux/arm64/v8
          coverage: false
          ignoreTestFailures: false
        Packaging debian9-amd64:
          variant: debian9
          arch: amd64
          containerImage: debian9-dev-amd64:latest
          platform: linux/amd64
          coverage: false
          ignoreTestFailures: false
        Packaging debian9-arm:
          variant: debian9
          arch: arm
          containerImage: debian9-dev-arm:latest
          platform: linux/arm/v7
          coverage: false
          ignoreTestFailures: false
        Packaging debian9-arm64:
          variant: debian9
          arch: arm64
          containerImage: debian9-dev-arm64:latest
          platform: linux/arm64/v8
          coverage: false
          ignoreTestFailures: false

    pool:
      vmImage: 'ubuntu-20.04'

    steps:

    - checkout: self
      submodules: recursive
      clean: true

    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: $(SERVICE_CONNECTION)

    - script: |
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        CONTAINER_ID=`docker run -di -v $(Build.SourcesDirectory):/AzOsConfig --platform=$(platform) $(CONTAINER_REGISTRY)/$(containerImage)`
        echo CONTAINER_ID=$CONTAINER_ID
        echo "##vso[task.setvariable variable=CONTAINER_ID]$CONTAINER_ID"
      displayName: Setup QEMU emulation

    - script: |
        docker exec $(CONTAINER_ID) bash -c "cmake -DCMAKE_BUILD_TYPE=Release -Duse_prov_client=ON -Dhsm_type_symm_key=ON -DCOMPILE_WITH_STRICTNESS=ON -DMAJOR_VERSION=$(MAJORVERSION) -DMINOR_VERSION=$(MINORVERSION) -DPATCH_VERSION=$(PATCHVERSION) -G Ninja -B/AzOsConfig/build-$(arch) -H/AzOsConfig/src"
      displayName: Generate build
      condition: eq(variables.coverage, false)

    - script: |
        docker exec $(CONTAINER_ID) bash -c "cmake -DCMAKE_BUILD_TYPE=Debug -Duse_prov_client=ON -Dhsm_type_symm_key=ON -DCOVERAGE=ON -DCOMPILE_WITH_STRICTNESS=ON -DMAJOR_VERSION=$(MAJORVERSION) -DMINOR_VERSION=$(MINORVERSION) -DPATCH_VERSION=$(PATCHVERSION) -G Ninja -B/AzOsConfig/build-$(arch) -H/AzOsConfig/src"
      displayName: Generate build (with coverage)
      condition: eq(variables.coverage, true)

    - script: |
        docker exec $(CONTAINER_ID) bash -c "cmake --build /AzOsConfig/build-$(arch)"
      displayName: Build osconfig

    - script: |
        docker exec $(CONTAINER_ID) bash -c "cd /AzOsConfig/build-$(arch) && cpack -G DEB"
      displayName: Create Deb package
      condition: eq(variables.coverage, false)

    - script: |
        cp $(Build.SourcesDirectory)/build-$(arch)/osconfig_* $(Build.ArtifactStagingDirectory)
      displayName: Stage Deb package
      condition: eq(variables.coverage, false)

    - publish: $(Build.ArtifactStagingDirectory)
      displayName: Publishing deb package for $(variant)_$(arch)
      artifact: OSConfig_$(Build.BuildNumber)_$(variant)_$(arch)
      condition: eq(variables.coverage, false)

    # Runs ctest in dashboard mode (-T) which will create a report used below (See `PublishTestResults`)
    # Tests by loading a CTestTestfile.cmake from the build tree and executing the defined tests.
    # Record the output and result of each test
    # See ctest test step - https://cmake.org/cmake/help/latest/manual/ctest.1.html#ctest-test-step
    - script: |
        docker exec $(CONTAINER_ID) bash -c "cd /AzOsConfig/build-$(arch) && ctest -T test --verbose > TestOutput.log"
      condition: eq(variables.ignoreTestFailures, false)
      displayName: Run tests

    - script: |
        docker exec $(CONTAINER_ID) bash -c "cd /AzOsConfig/build-$(arch) && ctest -T test --verbose > TestOutput.log || true"
      condition: eq(variables.ignoreTestFailures, true)
      displayName: Run tests (ignore failures)

    - publish: $(Build.SourcesDirectory)/build-$(arch)/TestOutput.log
      displayName: Publishing test outputs
      condition: succeededOrFailed()
      artifact: Test_Logs_$(variant)_$(arch)

    # Publishes the results of the ctest test pass to be used in the ADO dashboard
    - task: PublishTestResults@2
      displayName: 'Publish test results'
      condition: and(succeededOrFailed(), eq(variables.coverage, false), eq(variables.ignoreTestFailures, false))
      inputs:
        testRunner: cTest
        testResultsFiles: $(Build.SourcesDirectory)/build-$(arch)/Testing/*/Test.xml
        failTaskOnFailedTests: true
        testRunTitle: $(variant)-$(arch)
        platform: $(arch)

    - task: PublishTestResults@2
      displayName: 'Publish test results (ignore failures)'
      condition: and(succeededOrFailed(), eq(variables.coverage, false), eq(variables.ignoreTestFailures, true))
      inputs:
        testRunner: cTest
        testResultsFiles: $(Build.SourcesDirectory)/build-$(arch)/Testing/*/Test.xml
        failTaskOnFailedTests: false
        testRunTitle: $(variant)-$(arch)
        platform: $(arch)

    - script: |
        docker exec $(CONTAINER_ID) bash -c "gcovr -r /AzOsConfig/src . -e /AzOsConfig/src/agents/pnp/ --xml /AzOsConfig/build-$(arch)/coverage.xml"
      displayName: Run code coverage
      condition: eq(variables.coverage, true)
      workingDirectory: $(Agent.BuildDirectory)

    # Needed for the code coverage report task below (See `PublishCodeCoverageResults`)
    - task: UseDotNet@2
      displayName: Use .NET Core SDK
      condition: eq(variables.coverage, true)
      inputs:
        packageType: sdk
        version: 3.1.402
        installationPath: $(Agent.ToolsDirectory)/dotnet

    # Publish code coverage results
    - task: PublishCodeCoverageResults@1
      displayName: Publish code coverage results
      condition: eq(variables.coverage, true)
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: $(Build.SourcesDirectory)/build-$(arch)/coverage.xml
        pathToSources: $(Build.SourcesDirectory)/src
        #failIfCoverageEmpty: false # Optional