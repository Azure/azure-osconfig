# Binary build stage definition
# Parameters:
#  - (Required) os [string]: the name of the os/distro to be used
#  - (Required) architecture [string]: the name of the architecture to be built
#  - (Required) container [string]: the container to be used for the build environment (Example. ubuntu20.04-dev-amd64:latest)
#  - (Required) platform [string]: the platform string to be used, this is necessary for targetting foreign architectures (see https://docs.docker.com/desktop/multi-arch/)

parameters:
- name: displayName
  type: string
- name: prefix
  type: string
  default: binary
- name: os
  type: string
- name: architecture
  type: string
- name: registry
  type: string
  default: osconfig.azurecr.io
- name: container
  type: string
- name: platform
  type: string

stages:
- stage: ${{ parameters.prefix }}_${{ parameters.displayName }}
  displayName: Binary ${{ parameters.os }} ${{ parameters.architecture }}
  dependsOn: []

  jobs:
  - job: ${{ parameters.prefix }}_${{ parameters.displayName }}

    pool:
      vmImage: 'ubuntu-20.04'

    steps:

    - checkout: self
      submodules: recursive
      clean: true

    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: $(SERVICE_CONNECTION)

    - script: |
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        CONTAINER_ID=`docker run -di -v $(Build.SourcesDirectory):/AzOsConfig --platform=${{ parameters.platform }} ${{ parameters.registry }}/${{ parameters.container }}`
        echo CONTAINER_ID=$CONTAINER_ID
        echo "##vso[task.setvariable variable=CONTAINER_ID]$CONTAINER_ID"
        # Extract TWEAK version from full version string
        BUILD_VERSION_ARRAY=(`echo $(Build.BuildNumber) | tr '.' ' '`)
        TWEAK_VERSION=${BUILD_VERSION_ARRAY[-1]}
        echo TWEAK_VERSION=$TWEAK_VERSION
        echo "##vso[task.setvariable variable=TWEAK_VERSION]$TWEAK_VERSION"
      displayName: Setup QEMU emulation

    - script: |
        docker exec $(CONTAINER_ID) bash -c "cmake -DCMAKE_BUILD_TYPE=Release -Duse_prov_client=ON -Dhsm_type_symm_key=ON -DBUILD_TESTS=OFF -DCOMPILE_WITH_STRICTNESS=ON -DMAJOR_VERSION=$(MAJORVERSION) -DMINOR_VERSION=$(MINORVERSION) -DPATCH_VERSION=$(PATCHVERSION) -DTWEAK_VERSION=$(TWEAK_VERSION) -G Ninja -B/AzOsConfig/build-${{ parameters.architecture }} -H/AzOsConfig/src"
      displayName: Generate build

    - script: |
        docker exec $(CONTAINER_ID) bash -c "cmake --build /AzOsConfig/build-${{ parameters.architecture }}"
      displayName: Build osconfig

    - script: |
        docker exec $(CONTAINER_ID) bash -c "cd /AzOsConfig/build-${{ parameters.architecture }} && cpack -G DEB"
      displayName: Create Deb package

    - script: |
        cp $(Build.SourcesDirectory)/build-${{ parameters.architecture }}/osconfig_* $(Build.ArtifactStagingDirectory)
      displayName: Stage Deb package

    - publish: $(Build.ArtifactStagingDirectory)
      displayName: Publishing deb package for ${{ parameters.os }}_${{ parameters.architecture }}
      artifact: OSConfig_$(Build.BuildNumber)_${{ parameters.os }}_${{ parameters.architecture }}