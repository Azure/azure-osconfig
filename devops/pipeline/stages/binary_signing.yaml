# Binary signing stage (OSConfigCore internal)
# Parameters:
#  - (Optional) prefix [string]: the prefix for the stage/job to be used - default: binary
#  - (Optional) performSigning [boolean]: runs the "Code Signing" stage - default: false
#  - (Optional) vaultName [string]: the Key Vault name for the signing certificates - default: my-vault-name
#  - (Optional) aadCertificateName [string]: the name for the AAD Certificate - default: my-aadCertificate-name
#  - (Optional) esrpCertificateName [string]: the name for the ESRP Signing Request Certificate - default: my-esrpCertificate-name
#  - (Optional) dependsOn [object]: the stages that produce the artifacts to be signed - default: []

parameters:
  - name: prefix
    type: string
    default: binary

  - name: performSigning
    type: boolean
    default: false

  - name: vaultName
    type: string
    default: my-vault-name

  - name: aadCertificateName
    type: string
    default: my-aadCertificate-name

  - name: esrpCertificateName
    type: string
    default: my-esrpCertificate-name

  - name: dependsOn
    type: object
    default: []

stages:
- stage: ${{ parameters.prefix }}_code_signing
  dependsOn:
  - ${{ each stage in parameters.dependsOn }}:
    - ${{ stage }}
  condition: eq(${{ parameters.performSigning }}, true)
  displayName: Code Signing
  jobs:
  - job: main
    
    pool:
      vmImage: 'windows-latest'

    steps:

    - task: AzurePowerShell@5
      displayName: Download + Install ESRPClient
      inputs:
        azureSubscription: OSConfig-ARM
        azurePowerShellVersion: latestVersion
        workingDirectory: $(Build.SourcesDirectory)
        failOnStandardError: true
        pwsh: false
        scriptType: inlineScript
        inline: |
          $context = New-AzStorageContext -ConnectionString "$(STORAGE_CONNECTION_STRING)"
          Get-AzStorageBlobContent -Blob esrpclient.zip -Container esrpclient -Destination esrpclient.zip -Context $context
          Expand-Archive esrpclient.zip

    - task: DownloadPipelineArtifact@2
      displayName: Download artifacts to sign
      inputs:
        source: current
        patterns: |
          **/*focal_x86_64.deb
          **/*focal_armv7l.deb
          **/*focal_aarch64.deb
          **/*bionic_x86_64.deb
          **/*bionic_armv7l.deb
          **/*bionic_aarch64.deb
          **/*stretch_x86_64.deb
          **/*stretch_armv7l.deb
          **/*stretch_aarch64.deb
        path: $(Agent.TempDirectory)/osconfig_bin/

    - powershell: |
        Get-ChildItem -Recurse -File -Filter *.deb | Move-Item -Destination $(Build.SourcesDirectory)/esrpclient/Input
      workingDirectory: $(Agent.TempDirectory)/osconfig_bin/
      displayName: Stage artifacts for signing

    - task: AzureCLI@2
      displayName: Download certificates from Key Vault
      inputs:
        azureSubscription: OSConfig-ARM
        workingDirectory: $(Build.SourcesDirectory)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          az keyvault secret download --file certAAD.pfx --encoding base64 --name ${{ parameters.aadCertificateName }} --vault-name ${{ parameters.vaultName }}
          az keyvault secret download --file certESRP.pfx --encoding base64 --name ${{ parameters.esrpCertificateName }} --vault-name ${{ parameters.vaultName }}
    
    - task: AzurePowerShell@5
      displayName: Import certificates
      inputs:
        azureSubscription: OSConfig-ARM
        azurePowerShellVersion: latestVersion
        workingDirectory: $(Build.SourcesDirectory)
        failOnStandardError: true
        pwsh: false
        scriptType: inlineScript
        inline: |
          Set-Location -Path cert:\CurrentUser\My
          Import-PfxCertificate -FilePath $(Build.SourcesDirectory)\certAAD.pfx
          Import-PfxCertificate -FilePath $(Build.SourcesDirectory)\certESRP.pfx

    - powershell: |
        mkdir Output
        $(Build.SourcesDirectory)\devops\scripts\create_esrp_job.ps1 (ls .\Input\ | select -expand Name) ($pwd.Path + '\Input') ($pwd.Path + '\Output')
        cat Job.json
        .\EsrpClient.exe Sign -a "Config\Auth.json" -c "Config\Config.json" -i "Job.json" -o "Output\output.json" -p "Config\Policy.json" -l Verbose
      workingDirectory: $(Build.SourcesDirectory)/esrpclient
      displayName: Signing packages

    - powershell: |
        $result = (((cat .\Output\output.json | ConvertFrom-Json).submissionResponses | where { $_.statusCode -eq "pass" }).statusCode).Count -eq (ls .\Input\).Count
        if ($result -eq $false)
        {
          Write-Error "Failed signing" -TargetObject $result
        }
      workingDirectory: $(Build.SourcesDirectory)/esrpclient
      displayName: Validate ESRP signing job

    - publish: $(Build.SourcesDirectory)/esrpclient/Output/
      displayName: Publishing signed packages
      artifact: OSConfig_$(Build.BuildNumber)_SIGNED
