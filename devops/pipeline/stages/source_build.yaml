# Source build stage definition
# Parameters:
#  - (Required) containerPath [string]: the full path to the container to be used for the build environmentr (Example. osconfig.azurecr.io/ubuntu20.04-dev-amd64:latest)
#  - (Optional) prefix [string]: the prefix for the stage/job to be used - default: source
#  - (Optional) performCoverage [boolean]: performs code coverage (when enabled, no artifacts are produced) - default: false
#  - (Optional) ignoreTestFailures [boolean]: ignores the failures caused by failing tests - default: false
#  - (Optional) publishArtifact [boolean]: publishes the built artifacts (packages) as pipeline artifacts - default: true

parameters:
  - name: prefix
    type: string
    default: source

  - name: containerPath
    type: string

  - name: ignoreTestFailures
    type: boolean
    default: false

  - name: publishArtifact
    type: boolean
    default: false

stages:
- stage: source_build
  displayName: Source
  dependsOn: []

  jobs:
  - job: ${{ parameters.prefix }}

    pool:
      vmImage: 'ubuntu-20.04'

    steps:

    - checkout: self
      submodules: recursive
      clean: true

    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: $(SERVICE_CONNECTION)

    - script: |
        CONTAINER_ID=`docker run -di -v $(Build.SourcesDirectory):/AzOsConfig ${{ parameters.containerPath }}`
        echo CONTAINER_ID=$CONTAINER_ID
        echo "##vso[task.setvariable variable=CONTAINER_ID]$CONTAINER_ID"
      displayName: Container Setup

    - script: |
        docker exec $(CONTAINER_ID) bash -c "cmake -DCMAKE_BUILD_TYPE=Release -Duse_prov_client=ON -Dhsm_type_symm_key=ON -DCOMPILE_WITH_STRICTNESS=ON -DMAJOR_VERSION=$(MAJORVERSION) -DMINOR_VERSION=$(MINORVERSION) -DPATCH_VERSION=$(PATCHVERSION) -G Ninja -B/AzOsConfig/build -H/AzOsConfig/src"
      displayName: Generate build

    - script: |
        docker exec $(CONTAINER_ID) bash -c "cd /AzOsConfig/build && cmake --build . && cmake --build . --target dist && mkdir staging && cp -r /AzOsConfig/build/dist/* staging"
      displayName: Build & Stage Source Package

    - publish: $(Build.SourcesDirectory)/build/staging
      displayName: Publishing source package
      artifact: OSConfig_$(Build.BuildNumber)_SOURCES
      condition: eq(${{ parameters.publishArtifact }}, true)

    # Runs, tests and records in dashboard mode (-T) which will create a report used below (See `PublishTestResults`)
    # See ctest test step - https://cmake.org/cmake/help/latest/manual/ctest.1.html#ctest-test-step
    - script: |
        docker exec $(CONTAINER_ID) bash -c "cd /AzOsConfig/build && ctest -T test --verbose > TestOutput.log"
      condition: eq(${{ parameters.ignoreTestFailures }}, false)
      displayName: Run tests

    - script: |
        docker exec $(CONTAINER_ID) bash -c "cd /AzOsConfig/build && ctest -T test --verbose > TestOutput.log || true"
      condition: eq(${{ parameters.ignoreTestFailures }}, true)
      displayName: Run tests (ignore failures)

    - publish: $(Build.SourcesDirectory)/build/TestOutput.log
      displayName: Publishing test outputs
      condition: succeededOrFailed()
      artifact: Test_Logs_source

    # Publishes the results of the ctest test pass to be used in the Azure DevOps dashboard
    - task: PublishTestResults@2
      displayName: 'Publish test results'
      condition: and(succeededOrFailed(), eq(${{ parameters.ignoreTestFailures }}, false))
      inputs:
        testRunner: cTest
        testResultsFiles: $(Build.SourcesDirectory)/build/Testing/*/Test.xml
        failTaskOnFailedTests: true
        testRunTitle: source-build

    - task: PublishTestResults@2
      displayName: 'Publish test results (ignore failures)'
      condition: and(succeededOrFailed(), eq(${{ parameters.ignoreTestFailures }}, true))
      inputs:
        testRunner: cTest
        testResultsFiles: $(Build.SourcesDirectory)/build/Testing/*/Test.xml
        failTaskOnFailedTests: false
        testRunTitle: source-build